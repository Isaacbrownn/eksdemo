version: 0.2

phases:
  install:
    commands:
      # Install kubectl for interacting with EKS
      - echo Installing kubectl...
      - curl -LO "https://dl.k8s.io/release/v1.27.0/bin/linux/amd64/kubectl"
      - chmod +x ./kubectl
      - mv ./kubectl /usr/local/bin/kubectl
      - export KUBECONFIG=$HOME/.kube/config

  pre_build:
    commands:
      # Log in to Amazon ECR
      - echo Logging in to Amazon ECR...
      - aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin 344101797155.dkr.ecr.us-east-2.amazonaws.com/my-demo-repo
      # Build the Docker image
      - echo Building Docker image...
      - docker build -t sample-dotnet-app .
      # Tag the Docker image with the ECR repository URI
      - docker tag sample-dotnet-app:latest 344101797155.dkr.ecr.us-east-2.amazonaws.com/my-demo-repo:latest

  post_build:
    commands:
     # Extracting AWS Credential Information using STS Assume Role for kubectl
      - echo "Setting Environment Variables related to AWS CLI for Kube Config Setup"  
      - echo "Checking if we can retrieve the ekscodebuild role from the environment parameters"
      - echo $EKS_KUBECTL_ROLE_ARN
      - CREDENTIALS=$(aws sts assume-role --role-arn arn:aws:iam::344101797155:role/EksCodeBuildKubectlRole --role-session-name codebuild-kubectl --duration-seconds 900)
      - export AWS_ACCESS_KEY_ID="$(echo ${CREDENTIALS} | jq -r '.Credentials.AccessKeyId')"
      - export AWS_SECRET_ACCESS_KEY="$(echo ${CREDENTIALS} | jq -r '.Credentials.SecretAccessKey')"
      - export AWS_SESSION_TOKEN="$(echo ${CREDENTIALS} | jq -r '.Credentials.SessionToken')"
      - export AWS_EXPIRATION=$(echo ${CREDENTIALS} | jq -r '.Credentials.Expiration')
      ## added from chatgpt
      - export AWS_DEFAULT_REGION=us-east-2 # Replace with your desired AWS region
      - aws sts get-caller-identity --output text  # Verify assumed role
      
      # Push the Docker image to ECR
      - echo Pushing Docker image to ECR...
      - docker push 344101797155.dkr.ecr.us-east-2.amazonaws.com/my-demo-repo:latest
      # Deploy the application to Kubernetes (EKS)
      - echo "Deploying to Kubernetes (EKS)..."
      - aws eks --region us-east-2 update-kubeconfig --name eksdemo1
      - kubectl apply -f k8s-deployment-service.yaml  
artifacts:
  files:
    - k8s-deployment-service.yaml
