version: 0.2

phases:
  install:
    commands:
      - echo Installing app dependencies...
      - curl -LO https://dl.k8s.io/release/v1.27.2/bin/linux/amd64/kubectl   
      - chmod +x ./kubectl
      - mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin
      - echo 'export PATH=$PATH:$HOME/bin' >> ~/.bashrc
      #- source ~/.bashrc
      - echo 'Check kubectl version'
      - kubectl version --short --client
     
  pre_build:
    commands:
      # Login to ECR Registry for docker to push the image to ECR Repository
      - echo Logging in to Amazon ECR...
      - aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin 344101797155.dkr.ecr.us-east-2.amazonaws.com/my-demo-repo
      - IMAGE_REPO_NAME=344101797155.dkr.ecr.us-east-2.amazonaws.com/my-demo-repo
      - IMAGE_TAG=v1.0.0.RELEASE
  build:
    commands:
      # Build Docker Image
      - echo Build started on `date`
      - echo Building the Docker image...          
      - docker build --tag $IMAGE_REPO_NAME:$IMAGE_TAG .

      
  post_build:
    commands:
      # Push Docker Image to ECR Repository
      - echo Build completed on `date`
      - echo Pushing the Docker image...
      - docker push $IMAGE_REPO_NAME:$IMAGE_TAG
      - aws sts get-caller-identity
      # - eksctl create iamidentitymapping --cluster k8s-boy --region us-east-2 --arn arn:aws:iam::344101797155:role/service-role/codebuild-GODTHANYOU-service-role  --group system:masters --username CodeBuildKubectlRole
       # Get AWS Credential using STS Assume Role for kubectl
      - echo "Setting Environment Variables related to AWS CLI for Kube Config Setup"          
      - CREDENTIALS=$(aws sts assume-role --role-arn arn:aws:iam::344101797155:role/EksCodeBuildKubectlRole --role-session-name eks-codebuild --duration-seconds 900)
      - export AWS_ACCESS_KEY_ID="$(echo ${CREDENTIALS} | jq -r '.Credentials.AccessKeyId')"
      - export AWS_SECRET_ACCESS_KEY="$(echo ${CREDENTIALS} | jq -r '.Credentials.SecretAccessKey')"
      - export AWS_SESSION_TOKEN="$(echo ${CREDENTIALS} | jq -r '.Credentials.SessionToken')"
      - export AWS_EXPIRATION=$(echo ${CREDENTIALS} | jq -r '.Credentials.Expiration') # Setup kubectl with our EKS Cluster
      - aws eks update-kubeconfig --name k8s-boy --region us-east-2
      - echo Push the latest image to cluster
      # Apply changes to our Application using kubectl
      - kubectl apply -f k8s-deployment-service.yml
